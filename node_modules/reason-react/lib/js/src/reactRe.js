// Generated by BUCKLESCRIPT VERSION 1.7.3, PLEASE EDIT WITH CARE
'use strict';

var List                    = require("bs-platform/lib/js/list.js");
var $$Array                 = require("bs-platform/lib/js/array.js");
var Curry                   = require("bs-platform/lib/js/curry.js");
var React                   = require("react");
var Caml_array              = require("bs-platform/lib/js/caml_array.js");
var Pervasives              = require("bs-platform/lib/js/pervasives.js");
var Js_primitive            = require("bs-platform/lib/js/js_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var listToElement = $$Array.of_list;

function wrapPropsInternal(comp, props, wrapPropsHow, children, ref, key, _) {
  var ref$1 = ref ? ref[0] : undefined;
  var key$1 = key ? key[0] : undefined;
  var props$1 = Curry._3(wrapPropsHow, props, ref$1, key$1);
  if (children) {
    var match = children[1];
    var a = children[0];
    if (match) {
      var match$1 = match[1];
      var b = match[0];
      if (match$1) {
        var match$2 = match$1[1];
        var c = match$1[0];
        if (match$2) {
          var match$3 = match$2[1];
          var d = match$2[0];
          if (match$3) {
            var match$4 = match$3[1];
            var e = match$3[0];
            if (match$4) {
              var match$5 = match$4[1];
              var f = match$4[0];
              if (match$5) {
                var match$6 = match$5[1];
                var g = match$5[0];
                if (match$6) {
                  var match$7 = match$6[1];
                  var h = match$6[0];
                  if (match$7) {
                    var match$8 = match$7[1];
                    var i = match$7[0];
                    if (match$8) {
                      var match$9 = match$8[1];
                      var j = match$8[0];
                      if (match$9) {
                        var match$10 = match$9[1];
                        var k = match$9[0];
                        if (match$10) {
                          var match$11 = match$10[1];
                          var l = match$10[0];
                          if (match$11) {
                            var match$12 = match$11[1];
                            var m = match$11[0];
                            if (match$12) {
                              var match$13 = match$12[1];
                              var n = match$12[0];
                              if (match$13) {
                                var match$14 = match$13[1];
                                var o = match$13[0];
                                if (match$14) {
                                  var match$15 = match$14[1];
                                  var p = match$14[0];
                                  if (match$15) {
                                    if (match$15[1]) {
                                      var msg = "Reason allows up to 17 static children (but dynamic children in an array can be unlimited in size); You have " + (Pervasives.string_of_int(List.length(children)) + ", please put them in an array and assign key to the elements. Sorry for the inconvenience!");
                                      throw [
                                            Caml_builtin_exceptions.invalid_argument,
                                            msg
                                          ];
                                    } else {
                                      return React.createElement(comp, props$1, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, match$15[0]);
                                    }
                                  } else {
                                    return React.createElement(comp, props$1, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
                                  }
                                } else {
                                  return React.createElement(comp, props$1, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
                                }
                              } else {
                                return React.createElement(comp, props$1, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
                              }
                            } else {
                              return React.createElement(comp, props$1, a, b, c, d, e, f, g, h, i, j, k, l, m);
                            }
                          } else {
                            return React.createElement(comp, props$1, a, b, c, d, e, f, g, h, i, j, k, l);
                          }
                        } else {
                          return React.createElement(comp, props$1, a, b, c, d, e, f, g, h, i, j, k);
                        }
                      } else {
                        return React.createElement(comp, props$1, a, b, c, d, e, f, g, h, i, j);
                      }
                    } else {
                      return React.createElement(comp, props$1, a, b, c, d, e, f, g, h, i);
                    }
                  } else {
                    return React.createElement(comp, props$1, a, b, c, d, e, f, g, h);
                  }
                } else {
                  return React.createElement(comp, props$1, a, b, c, d, e, f, g);
                }
              } else {
                return React.createElement(comp, props$1, a, b, c, d, e, f);
              }
            } else {
              return React.createElement(comp, props$1, a, b, c, d, e);
            }
          } else {
            return React.createElement(comp, props$1, a, b, c, d);
          }
        } else {
          return React.createElement(comp, props$1, a, b, c);
        }
      } else {
        return React.createElement(comp, props$1, a, b);
      }
    } else {
      return React.createElement(comp, props$1, a);
    }
  } else {
    return React.createElement(comp, props$1);
  }
}

function jsChildrenToReason(children) {
  if (Js_primitive.is_nil_undef(children)) {
    return /* [] */0;
  } else if (Array.isArray(children)) {
    return $$Array.to_list(children);
  } else {
    return /* :: */[
            children,
            /* [] */0
          ];
  }
}

function componentDidMount() {
  return /* None */0;
}

function componentWillUpdate(_, _$1, _$2) {
  return /* None */0;
}

function componentDidUpdate(_, _$1, _$2) {
  return /* None */0;
}

function componentWillReceiveProps(_, _$1) {
  return /* None */0;
}

function componentWillUnmount() {
  return /* () */0;
}

function CreateComponent(CompleteComponentSpec) {
  var convertPropsIfTheyreFromJs = function (props) {
    var match = props.reasonProps;
    var match$1 = CompleteComponentSpec[/* jsPropsToReasonProps */8];
    if (match !== undefined) {
      return match;
    } else if (match$1) {
      return Curry._1(match$1[0], props);
    } else {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "A JS component called the Reason component " + (CompleteComponentSpec[/* name */0] + (" which didn't implement the JS->Reason React props conversion. Did you forget to add `JsProps` to " + (CompleteComponentSpec[/* name */0] + "'s `include ReactRe.Component.*`?")))
          ];
    }
  };
  var comp = React.createClass({
        displayName: CompleteComponentSpec[/* name */0],
        instanceVars: (null),
        memoizedUpdaterCallbacks: (null),
        memoizedUpdaterCount: 0,
        memoizedRefCallbacks: (null),
        memoizedRefCount: 0,
        getInitialState: function () {
          var $$this = this ;
          $$this.instanceVars = Curry._1(CompleteComponentSpec[/* getInstanceVars */1], /* () */0);
          $$this.memoizedUpdaterCallbacks = Caml_array.caml_make_vect(30, null);
          $$this.memoizedRefCallbacks = Caml_array.caml_make_vect(30, null);
          var that = (this);
          var props = convertPropsIfTheyreFromJs(that.props);
          return {
                  mlState: Curry._1(CompleteComponentSpec[/* getInitialState */2], props)
                };
        },
        componentDidMount: function () {
          var $$this = this ;
          var that = (this);
          var currState = that.state.mlState;
          var newState = Curry._1(CompleteComponentSpec[/* componentDidMount */3], /* record */[
                /* state */currState,
                /* props */convertPropsIfTheyreFromJs(that.props),
                /* updater */$$this.updaterMethod,
                /* handler */$$this.handlerMethod,
                /* instanceVars */$$this.instanceVars,
                /* setState */$$this.setStateMethod
              ]);
          if (newState) {
            var state = newState[0];
            return that.setState(function (_, _$1) {
                        return {
                                mlState: state
                              };
                      });
          } else {
            return /* () */0;
          }
        },
        componentWillUpdate: function (nextProps, nextState) {
          var $$this = this ;
          var that = (this);
          var currState = that.state.mlState;
          var newState = Curry._3(CompleteComponentSpec[/* componentWillUpdate */5], /* record */[
                /* state */currState,
                /* props */convertPropsIfTheyreFromJs(that.props),
                /* updater */$$this.updaterMethod,
                /* handler */$$this.handlerMethod,
                /* instanceVars */$$this.instanceVars,
                /* setState */$$this.setStateMethod
              ], convertPropsIfTheyreFromJs(nextProps), nextState.mlState);
          if (newState) {
            var state = newState[0];
            return that.setState(function (_, _$1) {
                        return {
                                mlState: state
                              };
                      });
          } else {
            return /* () */0;
          }
        },
        componentDidUpdate: function (prevProps, prevState) {
          var $$this = this ;
          var that = (this);
          var currState = that.state.mlState;
          var newState = Curry._3(CompleteComponentSpec[/* componentDidUpdate */6], convertPropsIfTheyreFromJs(prevProps), prevState.mlState, /* record */[
                /* state */currState,
                /* props */convertPropsIfTheyreFromJs(that.props),
                /* updater */$$this.updaterMethod,
                /* handler */$$this.handlerMethod,
                /* instanceVars */$$this.instanceVars,
                /* setState */$$this.setStateMethod
              ]);
          if (newState) {
            var state = newState[0];
            return that.setState(function (_, _$1) {
                        return {
                                mlState: state
                              };
                      });
          } else {
            return /* () */0;
          }
        },
        componentWillReceiveProps: function (nextProps) {
          var $$this = this ;
          var that = (this);
          var currState = that.state.mlState;
          var newState = Curry._2(CompleteComponentSpec[/* componentWillReceiveProps */4], /* record */[
                /* state */currState,
                /* props */convertPropsIfTheyreFromJs(that.props),
                /* updater */$$this.updaterMethod,
                /* handler */$$this.handlerMethod,
                /* instanceVars */$$this.instanceVars,
                /* setState */$$this.setStateMethod
              ], convertPropsIfTheyreFromJs(nextProps));
          if (newState) {
            var state = newState[0];
            return that.setState(function (_, _$1) {
                        return {
                                mlState: state
                              };
                      });
          } else {
            return /* () */0;
          }
        },
        componentWillUnmount: function () {
          var $$this = this ;
          var that = (this);
          var currState = that.state.mlState;
          return Curry._1(CompleteComponentSpec[/* componentWillUnmount */7], /* record */[
                      /* state */currState,
                      /* props */convertPropsIfTheyreFromJs(that.props),
                      /* updater */$$this.updaterMethod,
                      /* handler */$$this.handlerMethod,
                      /* instanceVars */$$this.instanceVars,
                      /* setState */$$this.setStateMethod
                    ]);
        },
        handlerMethod: function (callback) {
          var $$this = this ;
          var match = $$this.memoizedRefCount;
          var callbacks = $$this.memoizedRefCallbacks;
          var match$1 = (
  function(callbacks, callback) {
    for (var i = 0; i < callbacks.length; i++) {
      // we fill the slots from left to right. If there's a null then we can early stop.
      if (callbacks[i] == null) {
        return null;
      };
      if (callbacks[i][0] === callback) {
        return callbacks[i][1];
      }
    }
    return null;
  }
)(callbacks, callback);
          if (match$1 !== null) {
            return match$1;
          } else {
            var that = (this);
            var maybeMemoizedCallback = function (callbackPayload) {
              var currState = that.state.mlState;
              return Curry._2(callback, /* record */[
                          /* state */currState,
                          /* props */convertPropsIfTheyreFromJs(that.props),
                          /* updater */$$this.updaterMethod,
                          /* handler */$$this.handlerMethod,
                          /* instanceVars */$$this.instanceVars,
                          /* setState */$$this.setStateMethod
                        ], callbackPayload);
            };
            if (match < 30) {
              var memoizedRefCallbacks = $$this.memoizedRefCallbacks;
              Caml_array.caml_array_set(memoizedRefCallbacks, match, /* tuple */[
                    callback,
                    maybeMemoizedCallback
                  ]);
              $$this.memoizedRefCount = $$this.memoizedRefCount + 1 | 0;
            }
            return maybeMemoizedCallback;
          }
        },
        setStateMethod: function (cb) {
          var $$this = this ;
          var that = (this);
          return that.setState(function (prevState, props) {
                      var bag_000 = /* state */prevState.mlState;
                      var bag_001 = /* props */convertPropsIfTheyreFromJs(props);
                      var bag_002 = /* updater */$$this.updaterMethod;
                      var bag_003 = /* handler */$$this.handlerMethod;
                      var bag_004 = /* instanceVars */$$this.instanceVars;
                      var bag_005 = /* setState */$$this.setStateMethod;
                      var bag = /* record */[
                        bag_000,
                        bag_001,
                        bag_002,
                        bag_003,
                        bag_004,
                        bag_005
                      ];
                      return {
                              mlState: Curry._1(cb, bag)
                            };
                    });
        },
        updaterMethod: function (callback) {
          var $$this = this ;
          var match = $$this.memoizedUpdaterCount;
          var callbacks = $$this.memoizedUpdaterCallbacks;
          var match$1 = (
  function(callbacks, callback) {
    for (var i = 0; i < callbacks.length; i++) {
      // we fill the slots from left to right. If there's a null then we can early stop.
      if (callbacks[i] == null) {
        return null;
      };
      if (callbacks[i][0] === callback) {
        return callbacks[i][1];
      }
    }
    return null;
  }
)(callbacks, callback);
          if (match$1 !== null) {
            return match$1;
          } else {
            var that = (this);
            var maybeMemoizedCallback = function (callbackPayload) {
              var currState = that.state.mlState;
              var newState = Curry._2(callback, /* record */[
                    /* state */currState,
                    /* props */convertPropsIfTheyreFromJs(that.props),
                    /* updater */$$this.updaterMethod,
                    /* handler */$$this.handlerMethod,
                    /* instanceVars */$$this.instanceVars,
                    /* setState */$$this.setStateMethod
                  ], callbackPayload);
              if (newState) {
                var state = newState[0];
                return that.setState(function (_, _$1) {
                            return {
                                    mlState: state
                                  };
                          });
              } else {
                return /* () */0;
              }
            };
            if (match < 30) {
              var memoizedUpdaterCallbacks = $$this.memoizedUpdaterCallbacks;
              Caml_array.caml_array_set(memoizedUpdaterCallbacks, match, /* tuple */[
                    callback,
                    maybeMemoizedCallback
                  ]);
              $$this.memoizedUpdaterCount = $$this.memoizedUpdaterCount + 1 | 0;
            }
            return maybeMemoizedCallback;
          }
        },
        render: function () {
          var $$this = this ;
          var that = (this);
          return Curry._1(CompleteComponentSpec[/* render */9], /* record */[
                      /* state */that.state.mlState,
                      /* props */convertPropsIfTheyreFromJs(that.props),
                      /* updater */$$this.updaterMethod,
                      /* handler */$$this.handlerMethod,
                      /* instanceVars */$$this.instanceVars,
                      /* setState */$$this.setStateMethod
                    ]);
        }
      });
  var wrapPropsAndPutIndicatorThatItComesFromReason = function (props, ref, key) {
    return {
            reasonProps: props,
            ref: ref,
            key: key
          };
  };
  var wrapProps = function (props, children, ref, key, _) {
    return wrapPropsInternal(comp, props, wrapPropsAndPutIndicatorThatItComesFromReason, children, ref, key, /* () */0);
  };
  return /* module */[
          /* comp */comp,
          /* wrapProps */wrapProps
        ];
}

function wrapPropsAndPutRefAndKey(props, ref, key) {
  return Object.assign(Object.assign({ }, props), {
              ref: ref,
              key: key
            });
}

function wrapPropsShamelessly(comp, props, children, ref, key, _) {
  return wrapPropsInternal(comp, props, wrapPropsAndPutRefAndKey, children, ref, key, /* () */0);
}

function getInstanceVars() {
  return /* () */0;
}

function getInitialState() {
  return /* () */0;
}

function getInstanceVars$1() {
  return /* () */0;
}

function getInstanceVars$2() {
  return /* () */0;
}

var JsProps = /* module */[
  /* componentDidMount */componentDidMount,
  /* componentWillUpdate */componentWillUpdate,
  /* componentDidUpdate */componentDidUpdate,
  /* componentWillReceiveProps */componentWillReceiveProps,
  /* componentWillUnmount */componentWillUnmount,
  /* getInstanceVars */getInstanceVars$2,
  /* jsPropsToReasonProps : None */0
];

var JsProps$1 = /* module */[
  /* componentDidMount */componentDidMount,
  /* componentWillUpdate */componentWillUpdate,
  /* componentDidUpdate */componentDidUpdate,
  /* componentWillReceiveProps */componentWillReceiveProps,
  /* componentWillUnmount */componentWillUnmount
];

var InstanceVars = /* module */[
  /* componentDidMount */componentDidMount,
  /* componentWillUpdate */componentWillUpdate,
  /* componentDidUpdate */componentDidUpdate,
  /* componentWillReceiveProps */componentWillReceiveProps,
  /* componentWillUnmount */componentWillUnmount,
  /* jsPropsToReasonProps : None */0,
  /* JsProps */JsProps$1
];

var Stateful = /* module */[
  /* componentDidMount */componentDidMount,
  /* componentWillUpdate */componentWillUpdate,
  /* componentDidUpdate */componentDidUpdate,
  /* componentWillReceiveProps */componentWillReceiveProps,
  /* componentWillUnmount */componentWillUnmount,
  /* getInstanceVars */getInstanceVars$1,
  /* jsPropsToReasonProps : None */0,
  /* JsProps */JsProps,
  /* InstanceVars */InstanceVars
];

function getInstanceVars$3() {
  return /* () */0;
}

function getInitialState$1() {
  return /* () */0;
}

var JsProps$2 = /* module */[
  /* componentDidMount */componentDidMount,
  /* componentWillUpdate */componentWillUpdate,
  /* componentDidUpdate */componentDidUpdate,
  /* componentWillReceiveProps */componentWillReceiveProps,
  /* componentWillUnmount */componentWillUnmount,
  /* getInstanceVars */getInstanceVars$3,
  /* getInitialState */getInitialState$1
];

function getInitialState$2() {
  return /* () */0;
}

function getInitialState$3() {
  return /* () */0;
}

var JsProps$3 = /* module */[
  /* componentDidMount */componentDidMount,
  /* componentWillUpdate */componentWillUpdate,
  /* componentDidUpdate */componentDidUpdate,
  /* componentWillReceiveProps */componentWillReceiveProps,
  /* componentWillUnmount */componentWillUnmount,
  /* getInitialState */getInitialState$3
];

var InstanceVars$1 = /* module */[
  /* componentDidMount */componentDidMount,
  /* componentWillUpdate */componentWillUpdate,
  /* componentDidUpdate */componentDidUpdate,
  /* componentWillReceiveProps */componentWillReceiveProps,
  /* componentWillUnmount */componentWillUnmount,
  /* getInitialState */getInitialState$2,
  /* jsPropsToReasonProps : None */0,
  /* JsProps */JsProps$3
];

var Component = /* module */[
  /* componentDidMount */componentDidMount,
  /* componentWillUpdate */componentWillUpdate,
  /* componentDidUpdate */componentDidUpdate,
  /* componentWillReceiveProps */componentWillReceiveProps,
  /* componentWillUnmount */componentWillUnmount,
  /* getInstanceVars */getInstanceVars,
  /* jsPropsToReasonProps : None */0,
  /* getInitialState */getInitialState,
  /* Stateful */Stateful,
  /* JsProps */JsProps$2,
  /* InstanceVars */InstanceVars$1
];

var ComponentBase = [];

exports.listToElement        = listToElement;
exports.jsChildrenToReason   = jsChildrenToReason;
exports.ComponentBase        = ComponentBase;
exports.CreateComponent      = CreateComponent;
exports.wrapPropsShamelessly = wrapPropsShamelessly;
exports.Component            = Component;
/* react Not a pure module */
